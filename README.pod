=pod

=for poe_tests
BEGIN { $ENV{POE_EVENT_LOOP} = 'POE::Loop::Mojo_IOLoop' }
BEGIN { $ENV{MOJO_REACTOR} ||= 'Mojo::Reactor::Poll' }
BEGIN { $ENV{POE_LOOP_USES_POLL} = 1 }
use Mojo::IOLoop;
sub skip_tests {
	if ($_[0] eq '00_info') {
		my $reactor = Mojo::IOLoop->singleton->reactor;
		diag("Using reactor $reactor");
	}
	return undef;
}

=head1 NAME

POE::Loop::Mojo_IOLoop - a bridge that allows POE to be driven by Mojo::IOLoop

=head1 SYNOPSIS

See L<POE::Loop>.

 use POE qw(Loop::Mojo_IOLoop);
 
 use POE::Kernel { loop => 'Mojo::IOLoop' };
 
 BEGIN { $ENV{POE_EVENT_LOOP} = 'POE::Loop::Mojo_IOLoop' }
 use POE;

=head1 DESCRIPTION

L<POE::Loop::Mojo_IOLoop> implements the interface documented in L<POE::Loop>.
Therefore it has no documentation of its own. Please see L<POE::Loop> for more
details.

When using L<Mojo::IOLoop> with L<POE>, the loop must be set explicitly or
L<POE> will detect multiple event loops and fail. You can set the event loop
by setting the environment variable C<POE_EVENT_LOOP> to
C<POE::Loop::Mojo_IOLoop> before L<POE> is loaded, or by including it in the
C<use> directive when initially loading L<POE>. See
L<POE::Kernel/"Using POE with Other Event Loops"> for more information.

=head1 BUGS

Report any issues on the public bugtracker.

=head1 AUTHOR

Dan Book, C<dbook@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright 2015, Dan Book.

This library is free software; you may redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

=head1 SEE ALSO

L<POE>, L<POE::Loop>, L<Mojo::IOLoop>, L<POE::Loop::PerlSignals>

=cut
